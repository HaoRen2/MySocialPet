@model MySocialPet.Models.ViewModel.Salud.CalendarioEventosViewModel

@{
    @using System.Text.Json
    @Html.AntiForgeryToken()
    ViewData["Title"] = "Calendario de " + Model.NombreMascota;
}
<div class="welcome-section container test">
    <div class="container my-5 text-lg-start text-center test">
            <h2 class="fw-bold display-6">@ViewData["Title"]</h2>
                    @await Component.InvokeAsync("MascotaSelector", new {
    mascotaIdActual = Model.IdMascota,
        controlador = "Salud", 
        accion = "CalendarioEventos" 
        })
    </div>

<div id="calendar"></div>
<div class="toast-container position-fixed top-0 end-0 p-3" style="z-index: 1100">
    <div id="liveToast" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="toast-header">
            <strong class="me-auto" id="toastTitle">Notificación</strong>
            <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
        <div class="toast-body" id="toastBody">
            </div>
    </div>
</div>

<!-- Modal -->
<div class="modal fade" id="modalEvento" tabindex="-1" aria-labelledby="modalEventoLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <form asp-action="CreateEvento" method="post">
                <input type="hidden" name="IdEvento" />
                <div class="modal-header">
                    <h5 class="modal-title" id="modalEventoLabel">Nuevo Evento</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Cerrar"></button>
                </div>
                <div class="modal-body">
                    <input type="hidden" name="IdMascota" value="@Model.IdMascota" />
                    <div class="mb-3">
                        <label class="form-label">Título</label>
                        <input type="text" name="Titulo" class="form-control" required />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Fecha y hora</label>
                        <input type="datetime-local" name="FechaHora" class="form-control" required />
                    </div>
                    <div class="mb-3">
                     <label for="colorSelector" class="form-label">Color del Evento</label>
                    <select id="colorSelector" name="Color" class="form-select">
                        <option selected value="#dc3545" style="background-color:#dc3545; color: white;">Rojo (Urgente)</option>
                        <option value="#ffc107" style="background-color:#ffc107; color: black;">Amarillo (Aviso)</option>
                        <option value="#0d6efd" style="background-color:#0d6efd; color: white;">Azul (Médico)</option>
                        <option value="#198754" style="background-color:#198754; color: white;">Verde (Personal)</option>
                        <option value="#6c757d" style="background-color:#6c757d; color: white;">Gris (Otro)</option>
                    </select>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Notas</label>
                        <textarea name="Notas" class="form-control"></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="submit" class="btn btn-success">Guardar</button>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                </div>
            </form>
        </div>
    </div>
</div>
</div>

@section Scripts {

<script src="https://cdn.jsdelivr.net/npm/fullcalendar@6.1.18/index.global.min.js"></script>
<script src="@("https://cdn.jsdelivr.net/npm/@fullcalendar/core@6.1.18/locales/es.global.min.js")"></script>

<script>
    const eventos = @Html.Raw(JsonSerializer.Serialize(Model.Eventos.Select(e => new {
        id = e.IdEvento,
        title = e.Titulo,
        start = e.FechaHora.ToString("yyyy-MM-ddTHH:mm"),
        color = e.Color,
        extendedProps = new {
            description = e.Notas
        }
    })));

    document.addEventListener('DOMContentLoaded', function () {
        const calendarEl = document.getElementById('calendar');
        const modalEl = document.getElementById('modalEvento');
        const modal = new bootstrap.Modal(modalEl);
        const form = modalEl.querySelector('form');

        const calendar = new FullCalendar.Calendar(calendarEl, {
            initialView: 'dayGridMonth',
            locale: 'es',
            headerToolbar: {
                left: 'prev,next today',
                center: 'title',
                right: 'dayGridMonth,listWeek'
            },
            selectable: true,
            events: eventos,

            dateClick: function (info) {
                form.reset(); 
                form.action = '/Salud/CreateEvento';
                
                form.querySelector('input[name="IdEvento"]').value = '';
                form.querySelector('input[name="FechaHora"]').value = info.dateStr + "T09:00"; 
                form.querySelector('select[name="Color"]').value = '#dc3545'; 
                
                document.getElementById('modalEventoLabel').textContent = "Nuevo Evento";
                modal.show();
            },

            // Abre el modal para editar un evento existente
            eventClick: function (info) {
                const evento = info.event;
                
                form.reset();
                form.action = '/Salud/EditEvento';

                form.querySelector('input[name="IdEvento"]').value = evento.id;
                form.querySelector('input[name="Titulo"]').value = evento.title;
                form.querySelector('select[name="Color"]').value = evento.backgroundColor; // Usar backgroundColor que FC ya ha procesado
                form.querySelector('textarea[name="Notas"]').value = evento.extendedProps.description || '';
                
                const fecha = new Date(evento.start);
                fecha.setMinutes(fecha.getMinutes() - fecha.getTimezoneOffset());
                form.querySelector('input[name="FechaHora"]').value = fecha.toISOString().slice(0, 16);
                
                document.getElementById('modalEventoLabel').textContent = "Editar Evento";
                modal.show();
            },

      
eventContent: function(arg) {
                const title = arg.event.title;
                const description = arg.event.extendedProps.description;
                const color = arg.event.backgroundColor;
                const fecha = arg.event.start
                const opcionesDeFormato = 
                {
                    day: '2-digit',
                    month: '2-digit',
                    year: 'numeric',
                    hour: '2-digit',
                    minute: '2-digit',
                    hour12: false 
                };
                const fechaFormateada = fecha.toLocaleString('es-ES', opcionesDeFormato);


                const containerEl = document.createElement('div');
                containerEl.className = 'custom-event-container';
                
                // 3. Aplicamos los estilos para que TODO el div tenga color y se vea bien
                containerEl.style.backgroundColor = color;
                containerEl.style.borderColor = color; 
                containerEl.style.color = 'white'; 
                containerEl.style.padding = '3px 8px';
                containerEl.style.height = '100%';
                containerEl.style.overflow = 'hidden';
                containerEl.style.position = 'relative'; 
                containerEl.style.borderRadius = '4px'; 

                // 4. Creamos y añadimos el título
                const titleEl = document.createElement('div');
                titleEl.className = 'fw-bold';
                titleEl.textContent = title;
                containerEl.appendChild(titleEl);

                // 5. Creamos y añadimos la descripción (si existe)
                if (description) {
                    const descEl = document.createElement('div');
                    descEl.className = 'small opacity-75';
                    descEl.textContent = description;
                    containerEl.appendChild(descEl);
                }

                const fechaEl = document.createElement('div'); 
                fechaEl.className = 'small opacity-75';
                fechaEl.textContent = fechaFormateada;
                containerEl.appendChild(fechaEl);

                // 6. Creamos y añadimos el botón de eliminar (la misma lógica de antes)
                const deleteBtn = document.createElement('div');
                deleteBtn.innerHTML = '&times;';
                deleteBtn.title = 'Eliminar evento';
                deleteBtn.style.cssText = 'position:absolute; top:0; right:5px; font-size:1.3rem; cursor:pointer; text-shadow: 0 0 3px black;';
                deleteBtn.addEventListener('click', function (e) {
                    e.stopPropagation(); // MUY IMPORTANTE: Evita que se abra el modal de edición
                    e.preventDefault();
                    if (confirm("¿Estás seguro de que deseas eliminar este evento?")) {
                        // Lógica de eliminación con fetch (sin cambios)
                        const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
                        fetch(`/Salud/DeleteEvento/${arg.event.id}`, { method: 'POST', headers: { 'RequestVerificationToken': token } })
                            .then(res => {
                                if (res.ok) {
                                    arg.event.remove();
                                    showToast("Evento eliminado exitosamente");
                                } else { showToast("Error al eliminar el evento.", "Error"); }
                            }).catch(err => showToast("Error de red.", "Error"));
                    }
                });
                containerEl.appendChild(deleteBtn);

                return { domNodes: [containerEl] };
            }
        });

        calendar.render();

        function showToast(message, title = "Notificación") {
            document.getElementById('toastTitle').textContent = title;
            document.getElementById('toastBody').textContent = message;
            const toast = new bootstrap.Toast(document.getElementById('liveToast'));
            toast.show();
        }
    });
</script>
}